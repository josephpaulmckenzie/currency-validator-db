<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Success Page</title>

		<!-- CSS styles -->
		<style>
			body {
				font-family: Arial, sans-serif;
				background-color: #f0f0f0;
				margin: 0;
				padding: 0;
			}

			.container {
				max-width: 600px;
				margin: 20px auto;
				padding: 20px;
				background-color: #fff;
				border-radius: 8px;
				box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
			}

			h1,
			h2 {
				text-align: center;
			}

			form div {
				margin-bottom: 10px;
			}

			label {
				font-weight: bold;
				display: block;
				margin-bottom: 5px;
				text-align: center;
			}

			input[type='text'] {
				width: 100%;
				padding: 8px;
				border: 1px solid #ccc;
				border-radius: 4px;
				box-sizing: border-box;
			}

			button[type='submit'] {
				background-color: #007bff;
				color: #fff;
				padding: 10px 20px;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				display: block;
				margin: 20px auto 0;
			}

			button[type='submit']:hover {
				background-color: #0056b3;
			}

			.preview-container {
				display: flex;
				justify-content: center;
				align-items: center;
				height: auto;
				position: relative;
			}

			#previewImage {
				max-width: 100%;
				max-height: 90vh;
				border: 1px solid #ccc;
				border-radius: 4px;
				cursor: pointer;
			}

			#enlargedImage {
				display: none;
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background-color: rgba(0, 0, 0, 0.8);
				z-index: 9999;
				text-align: center;
				overflow: auto;
			}

			#enlargedImage img {
				margin: 20px auto;
				max-width: 90%;
				max-height: 90%;
			}

			#closeBtn {
				position: absolute;
				right: 20px;
				color: white;
				font-size: 24px;
				cursor: pointer;
			}

			.bounding-box {
				position: absolute;
				border: 2px solid red;
				z-index: 50;
			}

			/* Tooltip */
			.tooltip {
				position: absolute;
				background-color: #f0f0f0;
				border: 1px solid #ccc;
				border-radius: 4px;
				padding: 8px;
				display: none;
				z-index: 100;
			}
		</style>
	</head>

	<body>
		<div class="container">
			<h1>Upload Successful</h1>
			<form id="dataForm" action="/save" method="POST">
				<div class="preview-container">
					<img id="previewImage" src="<%= dataURL %>" alt="Preview Image" />
				</div>

				<div id="enlargedImage">
					<span id="closeBtn">&times;</span>
					<img id="enlargedImg" src="" alt="Enlarged Image" />
				</div>

				<!-- Form fields -->
				<div>
					<label for="validDenomination">Valid Denomination:</label>
					<input type="text" id="validDenomination" name="validDenomination" value="<%= noteDetails.validdenomination.text %>" />
				</div>
				<div>
					<label for="frontPlateId" id="frontPlateLabel">Front Plate ID:<span class="tooltip" id="frontPlateTooltip"></span></label>
					<input type="text" id="frontPlateId" name="frontPlateId" value="<%= noteDetails.frontPlateId.text %>" />
				</div>
				<div>
					<label for="serialPatternMatch">Serial Pattern Match:</label>
					<input type="text" id="serialPatternMatch" name="serialPatternMatch" value="<%= noteDetails.serialPatternMatch.text %>" />
				</div>
				<div>
					<label for="serialNumber">Serial Number:</label>
					<input type="text" id="serialNumber" name="serialNumber" value="<%= noteDetails.serialNumber.text %>" />
				</div>
				<div>
					<label for="federalReserveId">Federal Reserve ID:</label>
					<input type="text" id="federalReserveId" name="federalReserveId" value="<%= noteDetails.federalReserveId.text %>" />
				</div>
				<div>
					<label for="federalReserveLocation">Federal Reserve Location:</label>
					<input type="text" id="federalReserveLocation" name="federalReserveLocation" value="<%= noteDetails.federalReserveLocation %>" />
				</div>
				<div>
					<label for="notePositionId">Note Position Id:</label>
					<input type="text" id="notePositionId" name="notePositionId" value="<%= noteDetails.notePositionId.text %>" />
				</div>
				<div>
					<label for="seriesYear">Series Year:</label>
					<input type="text" id="seriesYear" name="seriesYear" value="<%= noteDetails.seriesYear %>" />
				</div>
				<div>
					<label for="treasurer">Treasurer:</label>
					<input type="text" id="treasurer" name="treasurer" value="<%= noteDetails.treasurer.text %>" />
				</div>
				<div>
					<label for="secretary">Secretary:</label>
					<input type="text" id="secretary" name="secretary" value="<%= noteDetails.secretary.text %>" />
				</div>

				<!-- Submit button -->
				<button type="submit">Save Changes</button>
			</form>
		</div>

		<!-- JavaScript -->
		<script>
			const enlargedImage = document.getElementById('enlargedImage');
			const enlargedImg = document.getElementById('enlargedImg');
			const closeBtn = document.getElementById('closeBtn');

			// Event listener for preview image click
			previewImage.addEventListener('click', () => {
				if (enlargedImage.style.display === 'block') {
					enlargedImage.style.display = 'none';
				} else {
					enlargedImg.src = previewImage.src;
					enlargedImage.style.display = 'block';
				}
			});

			// Add event listeners to form fields for bounding box display
			const formFields = document.querySelectorAll('input[type="text"]');
			formFields.forEach((field) => {
				let boundingBoxDrawn = false;
				field.addEventListener('click', () => {
					if (!boundingBoxDrawn) {
						const boundingBox = getBoundingBox(field.id);
						drawBox(boundingBox);
						boundingBoxDrawn = true;
					} else {
						removeBox();
						boundingBoxDrawn = false;
					}
				});
			});

			// Function to remove bounding box
			function removeBox() {
				const existingBox = document.querySelector('.bounding-box');
				if (existingBox) {
					existingBox.parentNode.removeChild(existingBox);
				}
			}

			// Function to get bounding box coordinates
			function getBoundingBox(fieldId) {
				const noteDetailsStr = '<%- JSON.stringify(noteDetails) %>';
				const noteDetails = JSON.parse(noteDetailsStr);
				const boundingBoxDetails = noteDetails[fieldId].boundingBox;

				const previewWidth = previewImage.clientWidth;
				const previewHeight = previewImage.clientHeight;
				const left = boundingBoxDetails.Left * previewWidth;
				const top = boundingBoxDetails.Top * previewHeight;
				const width = boundingBoxDetails.Width * previewWidth;
				const height = boundingBoxDetails.Height * previewHeight;

				return { left, top, width, height };
			}

			// Function to draw bounding box
			function drawBox(boundingBox) {
				const box = document.createElement('div');
				box.className = 'bounding-box';
				box.style.left = `${boundingBox.left}px`;
				box.style.top = `${boundingBox.top}px`;
				box.style.width = `${boundingBox.width}px`;
				box.style.height = `${boundingBox.height}px`;

				if (previewImage.parentElement) {
					previewImage.parentElement.appendChild(box);
				}
			}

			// Add tooltips to form fields
			const tooltips = {
				validDenomination: 'Denomination',
				frontPlateId: 'Front Plate ID',
				serialPatternMatch: 'Type of Cool serial number',
				serialNumber: 'Serial Number',
				federalReserveId: 'Federal Reserve ID',
				federalReserveLocation: 'Federal Reserve Location',
				notePositionId: 'Note Position ID',
				seriesYear: 'Series Year',
				treasurer: 'Treasurer',
				secretary: 'Secretary',
			};
			formFields.forEach((field) => {
				const label = document.querySelector(`label[for="${field.id}"]`);
				const tooltip = document.createElement('span');
				tooltip.className = 'tooltip';
				const tooltipMessage = tooltips[field.id];
				tooltip.textContent = tooltipMessage;
				label.appendChild(tooltip);
				label.addEventListener('mouseover', () => {
					tooltip.style.display = 'block';
				});
				label.addEventListener('mouseout', () => {
					tooltip.style.display = 'none';
				});
			});

			// Show tooltips on bounding box hover
			document.querySelectorAll('.bounding-box').forEach((box) => {
				const tooltip = box.querySelector('.tooltip');
				box.addEventListener('mouseover', () => {
					tooltip.style.display = 'block';
				});
				box.addEventListener('mouseout', () => {
					tooltip.style.display = 'none';
				});
			});

			// Event listener for close button click
			closeBtn.addEventListener('click', () => {
				enlargedImage.style.display = 'none';
			});
		</script>
	</body>
</html>
